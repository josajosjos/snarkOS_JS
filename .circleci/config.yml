version: 2.1
commands:
  setup_environment:
    description: "Setup testing environment"
    parameters:
      cache_key:
        type: string
        default: snarkos-stable-cache
    steps:
      - run: set -e
      - setup_remote_docker
      - run:
          name: Prepare environment and install dependencies
          command: |
            export SCCACHE_CACHE_SIZE=200M
            export WORK_DIR="$CIRCLE_WORKING_DIRECTORY/.cache/sccache"
            export SCCACHE_DIR="$CIRCLE_WORKING_DIRECTORY/.cache/sccache"
            mkdir -p "$CIRCLE_WORKING_DIRECTORY/.bin"
            wget https://github.com/mozilla/sccache/releases/download/0.2.13/sccache-0.2.13-x86_64-unknown-linux-musl.tar.gz
            tar -C "$CIRCLE_WORKING_DIRECTORY/.bin" -xvf sccache-0.2.13-x86_64-unknown-linux-musl.tar.gz
            mv $CIRCLE_WORKING_DIRECTORY/.bin/sccache-0.2.13-x86_64-unknown-linux-musl/sccache $CIRCLE_WORKING_DIRECTORY/.bin/sccache
            export PATH="$PATH:$CIRCLE_WORKING_DIRECTORY/.bin"
            export RUSTC_WRAPPER="sccache"
            rm -rf "$CIRCLE_WORKING_DIRECTORY/.cargo/registry"
            sudo apt-get update && sudo apt-get install -y clang llvm-dev llvm pkg-config xz-utils make libssl-dev libssl-dev
      - restore_cache:
          keys:
            - << parameters.cache_key >>
  clear_environment:
    description: "Clear environment"
    parameters:
      cache_key:
        type: string
        default: snarkos-stable-cache
    steps:
      - run: (sccache -s||true)
      - run: set +e
      - save_cache:
          key: << parameters.cache_key >>
          paths:
            - .cache/sccache
            - .cargo

jobs:
  rust-stable:
    docker:
      - image: cimg/rust:1.54.0
    resource_class: 2xlarge
    steps:
      - checkout
      - setup_environment:
          cache_key: snarkos-stable-cache
      - run:
          name: Build and run tests
          no_output_timeout: 60m
          command: >
            RUST_MIN_STACK=8388608 cargo test --workspace --no-run
      - persist_to_workspace:
          root: ~/
          paths: project/
      - clear_environment:
          cache_key: snarkos-stable-cache

  # codecov:
  #   machine:
  #     image: ubuntu-1604:202004-01
  #     docker_layer_caching: true
  #   resource_class: 2xlarge
  #   steps:
  #     - attach_workspace:
  #         at: /home/circleci/project/
  #     - run:
  #         name: Run kcov
  #         command: >
  #           cd ~/project/project/ &&
  #           docker run --security-opt seccomp=unconfined -v ~/project/project/:/home/circleci/project/
  #           howardwu/snarkos-codecov:2021-03-25 bash /home/circleci/project/ci/kcov.sh
  #     - run: cd ./project/ && bash <(curl -s https://codecov.io/bash)

  snarkos-consensus:
    docker:
      - image: cimg/rust:1.54.0
    resource_class: xlarge
    steps:
      - checkout
      - setup_environment:
          cache_key: snarkos-consensus-cache
      - run:
          name: Build and run tests
          no_output_timeout: 35m
          command: cd consensus && RUST_MIN_STACK=8388608 cargo test --release
      - clear_environment:
          cache_key: snarkos-consensus-cache

  snarkos-metrics:
    docker:
      - image: cimg/rust:1.54.0
    resource_class: xlarge
    steps:
      - checkout
      - setup_environment:
          cache_key: snarkos-metrics-cache
      - run:
          name: Build and run tests
          no_output_timeout: 35m
          command: cd metrics && RUST_MIN_STACK=8388608 cargo test
      - clear_environment:
          cache_key: snarkos-metrics-cache

  snarkos-network:
    docker:
      - image: cimg/rust:1.54.0
    resource_class: xlarge
    steps:
      - checkout
      - setup_environment:
          cache_key: snarkos-network-cache
      - run:
          name: Build and run tests
          no_output_timeout: 35m
          command: cd network && RUST_MIN_STACK=16777216 cargo test --release
      - clear_environment:
          cache_key: snarkos-network-cache

  snarkos-parameters:
    docker:
      - image: cimg/rust:1.54.0
    resource_class: xlarge
    steps:
      - checkout
      - setup_environment:
          cache_key: snarkos-parameters-cache
      - run:
          name: Build and run tests
          no_output_timeout: 35m
          command: cd parameters && RUST_MIN_STACK=8388608 cargo test
      - clear_environment:
          cache_key: snarkos-parameters-cache

  snarkos-profiler:
    docker:
      - image: cimg/rust:1.54.0
    resource_class: xlarge
    steps:
      - checkout
      - setup_environment:
          cache_key: snarkos-profiler-cache
      - run:
          name: Build and run tests
          no_output_timeout: 35m
          command: cd profiler && RUST_MIN_STACK=8388608 cargo test
      - clear_environment:
          cache_key: snarkos-profiler-cache

  snarkos-rpc:
    docker:
      - image: cimg/rust:1.54.0
    resource_class: xlarge
    steps:
      - checkout
      - setup_environment:
          cache_key: snarkos-rpc-cache
      - run:
          name: Build and run tests
          no_output_timeout: 35m
          command: cd rpc && RUST_MIN_STACK=8388608 cargo test --release
      - clear_environment:
          cache_key: snarkos-rpc-cache

  snarkos-storage:
    docker:
      - image: cimg/rust:1.54.0
    resource_class: xlarge
    steps:
      - checkout
      - setup_environment:
          cache_key: snarkos-storage-cache
      - run:
          name: Build and run tests
          no_output_timeout: 35m
          command: cd storage && RUST_MIN_STACK=8388608 cargo test
      - clear_environment:
          cache_key: snarkos-storage-cache

  snarkos-testing:
    docker:
      - image: cimg/rust:1.54.0
    resource_class: xlarge
    steps:
      - checkout
      - setup_environment:
          cache_key: snarkos-testing-cache
      - run:
          name: Build and run tests
          no_output_timeout: 35m
          command: |
            cd testing
            RUST_MIN_STACK=8388608 cargo test --release -- --nocapture --skip metrics
            cargo test --release metrics -- --test-threads 1
      - clear_environment:
          cache_key: snarkos-testing-cache

  fmt:
    docker:
      - image: howardwu/snarkos-ci:2021-03-25
    resource_class: xlarge
    steps:
      - checkout
      - setup_environment:
          cache_key: snarkos-fmt-cache
      - run:
          name: Check style
          no_output_timeout: 35m
          command: cargo fmt --all -- --check
      - clear_environment:
          cache_key: snarkos-fmt-cache
  
  build-and-publish-docker-arm:
    machine:
      image: ubuntu-2004:202101-01
      docker_layer_caching: true
    resource_class: arm.large
    environment:
      IMAGE_NAME: aleohq/snarkos
    steps:
      - checkout
      - run: mkdir -p my_workspace
      - run:
          name: "Build snarkos Docker Image ARM V8"
          no_output_timeout: 2h
          command: |
            VERSION=$(git rev-parse --short HEAD)
            docker build -f Dockerfile -t $IMAGE_NAME:$CIRCLE_BRANCH-$VERSION-arm64 .
      - run:
          name: "Push snarkos Docker Image ARM V8"
          command: |
            VERSION=$(git rev-parse --short HEAD)
            echo $DOCKERHUB_TOKEN | docker login -u $DOCKERHUB_USERNAME --password-stdin
            # CREATE THE SHELL FILE WITH IMAGE NAME AND TAG
            docker push $IMAGE_NAME:$CIRCLE_BRANCH-$VERSION-arm64
      - run:
          name: "Save arm64 image tag"
          command: |
            VERSION=$(git rev-parse --short HEAD)
            echo "$CIRCLE_BRANCH-$VERSION-arm64" > my_workspace/docker_tag_arm
      - persist_to_workspace:
          root: my_workspace
          paths:
            - docker_tag_arm
    
  build-and-publish-docker-amd:
    machine:
      image: ubuntu-2004:202101-01
      docker_layer_caching: true
    resource_class: large
    environment:
      IMAGE_NAME: aleohq/snarkos
    steps:
      - checkout
      - run: mkdir -p my_workspace
      - run:
          name: "Build snarkos Docker Image AMD"
          no_output_timeout: 2h
          command: |
            VERSION=$(git rev-parse --short HEAD)
            docker build -f Dockerfile -t $IMAGE_NAME:$CIRCLE_BRANCH-$VERSION-amd64 .
      - run:
          name: "Push snarkos Docker Image AMD"
          command: |
            VERSION=$(git rev-parse --short HEAD)
            echo $DOCKERHUB_TOKEN | docker login -u $DOCKERHUB_USERNAME --password-stdin
            docker push $IMAGE_NAME:$CIRCLE_BRANCH-$VERSION-amd64
      - run:
          name: "Save amd64 image tag"
          command: |
            VERSION=$(git rev-parse --short HEAD)
            echo "$CIRCLE_BRANCH-$VERSION-amd64" > my_workspace/docker_tag_amd
      - persist_to_workspace:
          root: my_workspace
          paths:
            - docker_tag_amd

  publish_snarkos_manifest:
    machine:
      image: ubuntu-2004:202101-01
      docker_layer_caching: true
    resource_class: medium
    environment:
      IMAGE_NAME: aleohq/snarkos
    steps:
      - checkout
      - attach_workspace:
          at: my_workspace
      - run:
          name: "Pull ARM docker image"
          command: |
            ARM_TAG=$(cat my_workspace/docker_tag_arm)
            echo $ARM_TAG
            docker pull $IMAGE_NAME:$ARM_TAG
      - run:
          name: "Pull AMD docker image"
          command: |
            AMD_TAG=$(cat my_workspace/docker_tag_amd)
            echo $AMD_TAG
            docker pull $IMAGE_NAME:$AMD_TAG  
      - run:
          name: "Create and push docker multi arch manifest"
          command: |
            ARM_TAG=$(cat my_workspace/docker_tag_arm)
            AMD_TAG=$(cat my_workspace/docker_tag_amd)
            echo $DOCKERHUB_TOKEN | docker login -u $DOCKERHUB_USERNAME --password-stdin
            echo $IMAGE_NAME
            echo $CIRCLE_BRANCH
            echo $ARM_TAG
            echo $AMD_TAG
            docker manifest create $IMAGE_NAME:${CIRCLE_BRANCH}-latest --amend $IMAGE_NAME:${ARM_TAG} --amend $IMAGE_NAME:${AMD_TAG}
            docker manifest inspect $IMAGE_NAME:${CIRCLE_BRANCH}-latest
            docker manifest push $IMAGE_NAME:${CIRCLE_BRANCH}-latest

workflows:
  version: 2
  main-workflow:
    jobs:
      - rust-stable
      # - codecov:
      #     requires:
      #       - rust-stable
      - snarkos-consensus
      - snarkos-metrics
      - snarkos-network
      - snarkos-parameters
      - snarkos-profiler
      - snarkos-rpc
      - snarkos-storage
      - snarkos-testing
      - fmt
  build-snarkos-docker-images:
    when:
      or:
        - equal: [ master, << pipeline.git.branch >> ]
        - equal: [ staging, << pipeline.git.branch >> ]
        - equal: [ groth16, << pipeline.git.branch >> ]
        - equal: [ docker-automation, << pipeline.git.branch >> ]
    jobs:
      - build-and-publish-docker-arm
      - build-and-publish-docker-amd
      - publish_snarkos_manifest:
          requires:
            - build-and-publish-docker-arm
            - build-and-publish-docker-amd

