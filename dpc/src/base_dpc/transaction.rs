use crate::base_dpc::{record::encrypted_record::*, BaseDPCComponents};
use snarkos_algorithms::merkle_tree::MerkleTreeDigest;
use snarkos_errors::objects::TransactionError;
use snarkos_models::{
    algorithms::{CommitmentScheme, SignatureScheme, CRH, SNARK},
    objects::Transaction,
};
use snarkos_utilities::{
    bytes::{FromBytes, ToBytes},
    serialize::{CanonicalDeserialize, CanonicalSerialize},
    to_bytes,
};

use blake2::{digest::Digest, Blake2s as b2s};
use std::{
    fmt,
    io::{Read, Result as IoResult, Write},
};

#[derive(Derivative)]
#[derivative(
    Clone(bound = "C: BaseDPCComponents"),
    PartialEq(bound = "C: BaseDPCComponents"),
    Eq(bound = "C: BaseDPCComponents")
)]
// TODO (howardwu): Remove the public visibility here
pub struct DPCTransaction<C: BaseDPCComponents> {
    /// The network this transaction is included in
    pub network_id: u8,

    pub ledger_digest: MerkleTreeDigest<C::MerkleParameters>,

    pub old_serial_numbers: Vec<<C::AccountSignature as SignatureScheme>::PublicKey>,

    pub new_commitments: Vec<<C::RecordCommitment as CommitmentScheme>::Output>,

    #[derivative(PartialEq = "ignore")]
    pub program_commitment: <C::ProgramVerificationKeyCommitment as CommitmentScheme>::Output,

    #[derivative(PartialEq = "ignore")]
    pub local_data_root: <C::LocalDataCRH as CRH>::Output,

    /// A transaction value balance is the difference between input and output record balances.
    /// This value effectively becomes the transaction fee for the miner. Only coinbase transactions
    /// can have a negative value balance representing tokens being minted.
    pub value_balance: i64,

    #[derivative(PartialEq = "ignore")]
    pub signatures: Vec<<C::AccountSignature as SignatureScheme>::Output>,

    /// Encrypted record and selector bits of the new records generated by the transaction
    pub encrypted_records: Vec<EncryptedRecord<C>>,

    #[derivative(PartialEq = "ignore")]
    pub transaction_proof: <C::OuterSNARK as SNARK>::Proof,

    pub memorandum: [u8; 32],
}

impl<C: BaseDPCComponents> DPCTransaction<C> {
    pub fn new(
        old_serial_numbers: Vec<<Self as Transaction>::SerialNumber>,
        new_commitments: Vec<<Self as Transaction>::Commitment>,
        memorandum: <Self as Transaction>::Memorandum,
        ledger_digest: MerkleTreeDigest<C::MerkleParameters>,
        transaction_proof: <C::OuterSNARK as SNARK>::Proof,
        program_commitment: <C::ProgramVerificationKeyCommitment as CommitmentScheme>::Output,
        local_data_root: <C::LocalDataCRH as CRH>::Output,
        value_balance: i64,
        network_id: u8,
        signatures: Vec<<C::AccountSignature as SignatureScheme>::Output>,
        encrypted_records: Vec<EncryptedRecord<C>>,
    ) -> Self {
        Self {
            old_serial_numbers,
            new_commitments,
            memorandum,
            ledger_digest,
            transaction_proof,
            program_commitment,
            local_data_root,
            value_balance,
            network_id,
            signatures,
            encrypted_records,
        }
    }
}

impl<C: BaseDPCComponents> Transaction for DPCTransaction<C> {
    type Commitment = <C::RecordCommitment as CommitmentScheme>::Output;
    type Digest = MerkleTreeDigest<C::MerkleParameters>;
    type EncryptedRecord = EncryptedRecord<C>;
    type LocalDataRoot = <C::LocalDataCRH as CRH>::Output;
    type Memorandum = [u8; 32];
    type ProgramCommitment = <C::ProgramVerificationKeyCommitment as CommitmentScheme>::Output;
    type SerialNumber = <C::AccountSignature as SignatureScheme>::PublicKey;

    /// Transaction id = Hash of (serial numbers || commitments || memo)
    fn transaction_id(&self) -> Result<[u8; 32], TransactionError> {
        let mut pre_image_bytes: Vec<u8> = vec![];

        for sn in self.old_serial_numbers() {
            pre_image_bytes.extend(&to_bytes![sn]?);
        }

        for cm in self.new_commitments() {
            pre_image_bytes.extend(&to_bytes![cm]?);
        }

        pre_image_bytes.extend(self.memorandum());

        let mut h = b2s::new();
        h.input(&pre_image_bytes);

        let mut result = [0u8; 32];
        result.copy_from_slice(&h.result());
        Ok(result)
    }

    fn network_id(&self) -> u8 {
        self.network_id
    }

    fn ledger_digest(&self) -> &Self::Digest {
        &self.ledger_digest
    }

    fn old_serial_numbers(&self) -> &[Self::SerialNumber] {
        self.old_serial_numbers.as_slice()
    }

    fn new_commitments(&self) -> &[Self::Commitment] {
        self.new_commitments.as_slice()
    }

    fn program_commitment(&self) -> &Self::ProgramCommitment {
        &self.program_commitment
    }

    fn local_data_root(&self) -> &Self::LocalDataRoot {
        &self.local_data_root
    }

    fn value_balance(&self) -> i64 {
        self.value_balance
    }

    fn encrypted_records(&self) -> &[Self::EncryptedRecord] {
        &self.encrypted_records
    }

    fn memorandum(&self) -> &Self::Memorandum {
        &self.memorandum
    }

    fn size(&self) -> usize {
        let transaction_bytes = to_bytes![self].unwrap();
        transaction_bytes.len()
    }
}

impl<C: BaseDPCComponents> ToBytes for DPCTransaction<C> {
    #[inline]
    fn write<W: Write>(&self, mut writer: W) -> IoResult<()> {
        for old_serial_number in &self.old_serial_numbers {
            CanonicalSerialize::serialize(old_serial_number, &mut writer).unwrap();
        }

        for new_commitment in &self.new_commitments {
            new_commitment.write(&mut writer)?;
        }

        self.memorandum.write(&mut writer)?;

        self.ledger_digest.write(&mut writer)?;
        self.transaction_proof.write(&mut writer)?;
        self.program_commitment.write(&mut writer)?;
        self.local_data_root.write(&mut writer)?;

        self.value_balance.write(&mut writer)?;
        self.network_id.write(&mut writer)?;

        for signature in &self.signatures {
            signature.write(&mut writer)?;
        }

        for encrypted_record in &self.encrypted_records {
            encrypted_record.write(&mut writer)?;
        }

        Ok(())
    }
}

impl<C: BaseDPCComponents> FromBytes for DPCTransaction<C> {
    #[inline]
    fn read<R: Read>(mut reader: R) -> IoResult<Self> {
        // Read the old serial numbers
        let num_old_serial_numbers = C::NUM_INPUT_RECORDS;
        let mut old_serial_numbers = vec![];
        for _ in 0..num_old_serial_numbers {
            let old_serial_number: <C::AccountSignature as SignatureScheme>::PublicKey =
                CanonicalDeserialize::deserialize(&mut reader).unwrap();

            old_serial_numbers.push(old_serial_number);
        }

        // Read the new commitments
        let num_new_commitments = C::NUM_OUTPUT_RECORDS;
        let mut new_commitments = vec![];
        for _ in 0..num_new_commitments {
            let new_commitment: <C::RecordCommitment as CommitmentScheme>::Output = FromBytes::read(&mut reader)?;
            new_commitments.push(new_commitment);
        }

        let memorandum: [u8; 32] = FromBytes::read(&mut reader)?;

        let ledger_digest: MerkleTreeDigest<C::MerkleParameters> = FromBytes::read(&mut reader)?;
        let transaction_proof: <C::OuterSNARK as SNARK>::Proof = FromBytes::read(&mut reader)?;
        let program_commitment: <C::ProgramVerificationKeyCommitment as CommitmentScheme>::Output =
            FromBytes::read(&mut reader)?;
        let local_data_root: <C::LocalDataCRH as CRH>::Output = FromBytes::read(&mut reader)?;

        let value_balance: i64 = FromBytes::read(&mut reader)?;
        let network_id: u8 = FromBytes::read(&mut reader)?;

        // Read the signatures
        let num_signatures = C::NUM_INPUT_RECORDS;
        let mut signatures = vec![];
        for _ in 0..num_signatures {
            let signature: <C::AccountSignature as SignatureScheme>::Output = FromBytes::read(&mut reader)?;
            signatures.push(signature);
        }

        // Read the encrypted records
        let num_encrypted_records = C::NUM_OUTPUT_RECORDS;
        let mut encrypted_records = vec![];
        for _ in 0..num_encrypted_records {
            let encrypted_record: EncryptedRecord<C> = FromBytes::read(&mut reader)?;

            encrypted_records.push(encrypted_record);
        }

        Ok(Self {
            network_id,
            ledger_digest,
            old_serial_numbers,
            new_commitments,
            program_commitment,
            local_data_root,
            value_balance,
            signatures,
            encrypted_records,
            transaction_proof,
            memorandum,
        })
    }
}

// TODO add debug support for record ciphertexts
impl<C: BaseDPCComponents> fmt::Debug for DPCTransaction<C> {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "DPCTransaction {{ network_id: {:?}, digest: {:?}, old_serial_numbers: {:?}, new_commitments: {:?}, program_commitment: {:?}, local_data_root: {:?}, value_balance: {:?}, signatures: {:?}, transaction_proof: {:?}, memorandum: {:?} }}",
            self.network_id,
            self.ledger_digest,
            self.old_serial_numbers,
            self.new_commitments,
            self.program_commitment,
            self.local_data_root,
            self.value_balance,
            self.signatures,
            self.transaction_proof,
            self.memorandum,
        )
    }
}
